@page "/studentlessons"
@inject ILessonClientService LessonService
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@rendermode InteractiveServer
@layout StudentLayout

<PageTitle>C++ Lessons - Learning Hub</PageTitle>

@if (isLoading)
{
    <Loader />
}
else
{
    <!-- Header Section -->
    <div class="flex justify-between items-center mb-6">
        <div>
            <h1 class="text-3xl font-bold text-gray-800">C++ Learning Hub</h1>
            <p class="text-gray-600 mt-1">Master C++ programming with our comprehensive lessons</p>
        </div>
        <MudIcon Icon="@Icons.Material.Filled.School" Size="Size.Large" Class="text-blue-600" />
    </div>

    <!-- Lesson Cards Grid -->
    @if (isLoading)
    {
        <div class="flex justify-center items-center py-8">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </div>
    }
    else if (!lessons.Any())
    {
        <MudCard Class="text-center py-12">
            <MudCardContent>
                <MudIcon Icon="@Icons.Material.Filled.MenuBook" Size="Size.Large" Class="mb-4 text-gray-400" />
                <MudText Typo="Typo.h6" Class="mb-2">No lessons available</MudText>
                <MudText Typo="Typo.body2" Class="text-gray-500 mb-4">Check back soon for new learning content!</MudText>
            </MudCardContent>
        </MudCard>
    }
    else
    {
        <!-- Progress Overview -->
        <MudCard Class="mb-6 bg-gradient-to-r from-blue-50 to-indigo-50">
            <MudCardContent>
                <div class="flex justify-between items-center">
                    <div>
                        <MudText Typo="Typo.h6" Class="font-bold text-blue-800">Your Progress</MudText>
                        <MudText Typo="Typo.body2" Class="text-blue-600">
                            @lessons.Count lesson@(lessons.Count == 1 ? "" : "s") available to explore
                        </MudText>
                    </div>
                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Large" Class="text-blue-500" />
                </div>
            </MudCardContent>
        </MudCard>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var lesson in lessons.OrderBy(l => l.OrderIndex))
            {
                <MudCard Class="cursor-pointer hover:shadow-lg transition-all duration-300 border-l-4 border-blue-500"
                         @onclick="() => OpenLessonViewer(lesson.Id)">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div class="flex justify-between items-start">
                                <div>
                                    <MudText Typo="Typo.h6" Class="font-bold">@lesson.Title</MudText>
                                    <MudChip T="string" Color="Color.Primary" Size="Size.Small" Class="mt-1">
                                        Lesson @lesson.OrderIndex
                                    </MudChip>
                                </div>
                                <MudIcon Icon="@Icons.Material.Filled.PlayArrow"
                                         Class="text-2xl text-green-500" />
                            </div>
                        </CardHeaderContent>
                    </MudCardHeader>

                    <MudCardContent>
                        <MudText Typo="Typo.body2" Class="text-gray-600 mb-3 line-clamp-2">
                            @lesson.Description
                        </MudText>

                        <div class="flex justify-between items-center mb-3">
                            <div class="flex items-center text-sm text-gray-500">
                                <MudIcon Icon="@Icons.Material.Filled.AccessTime" Size="Size.Small" Class="mr-1" />
                                <span>@GetEstimatedReadTime(lesson.Content)</span>
                            </div>
                            <div class="flex items-center text-sm text-gray-500">
                                <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" Class="mr-1" />
                                <span>@lesson.CreatedAt.ToString("MMM dd, yyyy")</span>
                            </div>
                        </div>

                        <div class="flex justify-between items-center">
                            <div>
                                <MudChip T="string" Color="Color.Success"
                                         Size="Size.Small" Class="text-green-700">
                                    Ready to Learn
                                </MudChip>
                            </div>
                        </div>
                    </MudCardContent>

                    <MudCardActions>
                        <div class="flex justify-center w-full">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Visibility"
                                       OnClick="() => OpenLessonViewer(lesson.Id)"
                                       FullWidth="true"
                                       Class="mx-4">
                                Start Learning
                            </MudButton>
                        </div>
                    </MudCardActions>
                </MudCard>
            }
        </div>
    }
}

<style>
    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .line-clamp-3 {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .bg-gradient-to-r {
        background: linear-gradient(90deg, #eff6ff 0%, #e0e7ff 100%);
    }
</style>

@code {
    private List<LessonDto> lessons = new();
    private bool isLoading = false;

    private DialogOptions lessonViewerOptions = new()
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            CloseButton = true
        };

    protected override async Task OnInitializedAsync()
    {
        await LoadLessons();
    }

    private async Task LoadLessons()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            Console.WriteLine("Starting to load lessons...");
            Console.WriteLine($"HttpClient BaseAddress: {LessonService.GetType().Name}");

            lessons = await LessonService.GetAllLessonsAsync();

            Console.WriteLine($"Lessons loaded successfully. Count: {lessons?.Count ?? 0}");

            if (lessons != null && lessons.Any())
            {
                Console.WriteLine("Lessons found:");
                foreach (var lesson in lessons)
                {
                    Console.WriteLine($"- Lesson {lesson.Id}: {lesson.Title} (Order: {lesson.OrderIndex})");
                }
            }
            else
            {
                Console.WriteLine("No lessons returned from API");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in LoadLessons: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            Snackbar.Add($"Error loading lessons: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OpenLessonViewer(int lessonId)
    {
        var parameters = new DialogParameters
            {
                ["LessonId"] = lessonId
            };

        await DialogService.ShowAsync<StudentLessonViewer>(
            "Lesson Viewer", parameters, lessonViewerOptions);
    }

    private string GetEstimatedReadTime(string content)
    {
        if (string.IsNullOrEmpty(content))
            return "< 1 min";

        // Rough estimation: average reading speed is 200-250 words per minute
        var wordCount = content.Split(' ', StringSplitOptions.RemoveEmptyEntries).Length;
        var minutes = Math.Max(1, (int)Math.Ceiling(wordCount / 225.0));

        return minutes == 1 ? "1 min" : $"{minutes} mins";
    }
}