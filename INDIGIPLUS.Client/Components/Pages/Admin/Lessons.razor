@page "/lessons"
@inject ILessonClientService LessonService
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<PageTitle>C++ Lessons</PageTitle>

@if (isLoading)
{
    <Loader />
}
else
{
    <!-- Header Section -->
    <div class="flex justify-between items-center mb-6">
        <div>
            <h1 class="text-3xl font-bold text-gray-800">C++ Lessons</h1>
            <p class="text-gray-600 mt-1">Manage your programming lessons</p>
        </div>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Tertiary"
                   StartIcon="@Icons.Material.Filled.Add"
                   Size="Size.Large"
                   OnClick="OpenCreateDialog">
            Create New Lesson
        </MudButton>
    </div>

    <!-- Lesson Cards Grid -->
    @if (isLoading)
    {
        <div class="flex justify-center items-center py-8">
            <MudProgressCircular Color="Color.Tertiary" Indeterminate="true" />
        </div>
    }
    else if (!lessons.Any())
    {
        <MudCard Class="text-center py-12">
            <MudCardContent>
                <MudIcon Icon="@Icons.Material.Filled.MenuBook" Size="Size.Large" Class="mb-4 text-gray-400" />
                <MudText Typo="Typo.h6" Class="mb-2">No lessons available</MudText>
                <MudText Typo="Typo.body2" Class="text-gray-500 mb-4">Create your first lesson to get started!</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenCreateDialog">
                    Create First Lesson
                </MudButton>
            </MudCardContent>
        </MudCard>
    }
    else
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var lesson in lessons.OrderBy(l => l.OrderIndex))
            {
                <MudCard Class="cursor-pointer hover:shadow-lg transition-all duration-300 border-l-4 border-blue-500"
                         @onclick="() => ViewLesson(lesson.Id)">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div class="flex justify-between items-start">
                                <div>
                                    <MudText Typo="Typo.h6" Class="font-bold">@lesson.Title</MudText>
                                    <MudChip T="string" Color="Color.Info" Size="Size.Small" Class="mt-1">
                                        Order: @lesson.OrderIndex
                                    </MudChip>
                                </div>
                                <MudIcon Icon="@Icons.Material.Filled.MenuBook"
                                         Class="text-2xl text-blue-500" />
                            </div>
                        </CardHeaderContent>
                    </MudCardHeader>

                    <MudCardContent>
                        <MudText Typo="Typo.body2" Class="text-gray-600 mb-3 line-clamp-2">
                            @lesson.Description
                        </MudText>

                        <div class="flex justify-between items-center">
                            <div>
                                <MudChip T="string" Color="Color.Tertiary"
                                         Size="Size.Small" Class="text-blue-700">
                                    C++ Lesson
                                </MudChip>
                            </div>
                            <MudText Typo="Typo.caption" Class="text-gray-500">
                                @lesson.CreatedAt.ToString("MMM dd, yyyy")
                            </MudText>
                        </div>
                    </MudCardContent>

                    <MudCardActions>
                        <div class="flex justify-between w-full">
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Visibility"
                                       OnClick="() => ViewLesson(lesson.Id)"
                                       Size="Size.Small">
                                View Lesson
                            </MudButton>
                            <div>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Color="Color.Warning"
                                               Size="Size.Small"
                                               OnClick="() => OpenEditDialog(lesson)">
                                </MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               Size="Size.Small"
                                               OnClick="() => DeleteLesson(lesson)">
                                </MudIconButton>
                            </div>
                        </div>
                    </MudCardActions>
                </MudCard>
            }
        </div>
    }
}

@code {
    [Parameter] public int? LessonId { get; set; }
    private List<LessonDto> lessons = new();
    private bool isLoading = false;

    private DialogOptions dialogOptions = new()
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
        };

    protected override async Task OnInitializedAsync()
    {
        await LoadLessons();
    }

    private async Task LoadLessons()
    {
        isLoading = true;

        try
        {
            await Task.Delay(3000);
            lessons = await LessonService.GetAllLessonsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading lessons: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OpenCreateDialog()
    {
        var parameters = new DialogParameters();

        var dialogReference = await DialogService.ShowAsync<LessonDialog>(
            "Create New Lesson", parameters, dialogOptions);

        var result = await dialogReference.Result;

        if (!result!.Canceled)
        {
            await LoadLessons();
            Snackbar.Add("Lesson created successfully", Severity.Success);
        }
    }

    private async Task OpenEditDialog(LessonDto lesson)
    {
        var parameters = new DialogParameters
            {
                ["LessonId"] = lesson.Id
            };

        var dialogReference = await DialogService.ShowAsync<LessonDialog>(
            "Edit Lesson", parameters, dialogOptions);

        var result = await dialogReference.Result;

        if (!result!.Canceled)
        {
            await LoadLessons();
            Snackbar.Add("Lesson updated successfully", Severity.Success);
        }
    }

    private async Task ViewLesson(int lessonId)
    {
        var parameters = new DialogParameters
            {
                ["LessonId"] = lessonId
            };

        var viewDialogOptions = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Large,
                FullWidth = true,
            };

        await DialogService.ShowAsync<LessonViewDialog>(
            "View Lesson", parameters, viewDialogOptions);
    }

    private async Task DeleteLesson(LessonDto lesson)
    {
        var parameters = new DialogParameters
            {
                ["ContentText"] = $"Are you sure you want to delete '{lesson.Title}'? This action cannot be undone.",
                ["ButtonText"] = "DELETE",
                ["Color"] = Color.Error
            };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Deletion", parameters);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            var success = await LessonService.DeleteLessonAsync(lesson.Id);
            if (success)
            {
                await LoadLessons();
                Snackbar.Add("Lesson deleted successfully", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to delete lesson", Severity.Error);
            }
        }
    }
}