@using INDIGIPLUS.Client.DTOs.Questions
@using INDIGIPLUS.Client.DTOs.Answers
@using INDIGIPLUS.Client.DTOs.Quizs
@using INDIGIPLUS.Client.Common.Enums
@inject IQuestionClientService QuestionService
@inject IQuizClientService QuizService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <div class="space-y-6">
            <!-- Question Basic Info -->
            <MudCard>
                <MudCardContent>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <!-- Quiz Selection -->
                        <MudSelect T="int"
                                   Value="model.QuizId"
                                   ValueChanged="OnQuizChanged"
                                   Label="Select Quiz"
                                   Variant="Variant.Outlined"
                                   Required="true"
                                   RequiredError="Please select a quiz">
                            @foreach (var quiz in availableQuizzes)
                            {
                                <MudSelectItem T="int" Value="@quiz.Id">@quiz.Title</MudSelectItem>
                            }
                        </MudSelect>

                        <!-- Order Index -->
                        <MudNumericField T="int"
                                         @bind-Value="model.OrderIndex"
                                         Label="Order"
                                         Variant="Variant.Outlined"
                                         Min="1"
                                         Required="true" />
                    </div>

                    <!-- Question Text -->
                    <MudTextField T="string"
                                  @bind-Value="model.QuestionText"
                                  Label="Question Text"
                                  Variant="Variant.Outlined"
                                  Lines="3"
                                  Required="true"
                                  RequiredError="Question text is required"
                                  Class="mb-4" />

                    <!-- Question Type -->
                    <MudSelect T="QuestionType"
                               Value="model.Type"
                               ValueChanged="OnQuestionTypeChanged"
                               Label="Question Type"
                               Variant="Variant.Outlined"
                               Required="true">
                        <MudSelectItem T="QuestionType" Value="QuestionType.MultipleChoice">
                            <div class="flex items-center gap-2">
                                <MudIcon Icon="@Icons.Material.Filled.RadioButtonChecked" Size="Size.Small" />
                                Multiple Choice
                            </div>
                        </MudSelectItem>
                        <MudSelectItem T="QuestionType" Value="QuestionType.TrueFalse">
                            <div class="flex items-center gap-2">
                                <MudIcon Icon="@Icons.Material.Filled.ToggleOn" Size="Size.Small" />
                                True or False
                            </div>
                        </MudSelectItem>
                        <MudSelectItem T="QuestionType" Value="QuestionType.Essay">
                            <div class="flex items-center gap-2">
                                <MudIcon Icon="@Icons.Material.Filled.Article" Size="Size.Small" />
                                Identification (Short Answer)
                            </div>
                        </MudSelectItem>
                    </MudSelect>
                </MudCardContent>
            </MudCard>

            <!-- Answer Options Section -->
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <div class="flex justify-between items-center">
                            <MudText Typo="Typo.h6">
                                @GetAnswersSectionTitle()
                            </MudText>
                            @if (model.Type == QuestionType.MultipleChoice)
                            {
                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           Size="Size.Small"
                                           StartIcon="@Icons.Material.Filled.Add"
                                           OnClick="AddOption">
                                    Add Option
                                </MudButton>
                            }
                        </div>
                    </CardHeaderContent>
                </MudCardHeader>

                <MudCardContent>
                    @if (model.Type == QuestionType.MultipleChoice)
                    {
                        <div class="space-y-3">
                            @for (int i = 0; i < model.Answers.Count; i++)
                            {
                                var index = i; // Capture for lambda
                                var answer = model.Answers[index];
                                <MudCard Outlined="true" Class="p-3">
                                    <div class="flex items-center gap-3">
                                        <!-- Correct Answer Checkbox -->
                                        <MudCheckBox T="bool"
                                                     Checked="@answer.IsCorrect"
                                                     CheckedChanged="@((bool value) => OnCorrectAnswerChanged(index, value))"
                                                     Color="Color.Success"
                                                     Size="Size.Medium" />

                                        <!-- Option Text -->
                                        <MudTextField T="string"
                                                      Value="@answer.AnswerText"
                                                      ValueChanged="@((string value) => OnAnswerTextChanged(index, value))"
                                                      Label="@($"Option {GetOptionLetter(index)}")"
                                                      Variant="Variant.Outlined"
                                                      Class="flex-1"
                                                      Required="true" />

                                        <!-- Order Controls -->
                                        <div class="flex flex-col gap-1">
                                            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp"
                                                           Size="Size.Small"
                                                           Color="Color.Primary"
                                                           Disabled="@(index == 0)"
                                                           OnClick="@(() => MoveOptionUp(index))" />
                                            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowDown"
                                                           Size="Size.Small"
                                                           Color="Color.Primary"
                                                           Disabled="@(index == model.Answers.Count - 1)"
                                                           OnClick="@(() => MoveOptionDown(index))" />
                                        </div>

                                        <!-- Delete Button -->
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                       Color="Color.Error"
                                                       Size="Size.Small"
                                                       Disabled="@(model.Answers.Count <= 2)"
                                                       OnClick="@(() => RemoveOption(index))" />
                                    </div>
                                </MudCard>
                            }

                            @if (model.Answers.Count < 2)
                            {
                                <MudAlert Severity="Severity.Warning" Class="mt-3">
                                    Multiple choice questions must have at least 2 options.
                                </MudAlert>
                            }

                            @if (!HasCorrectAnswer())
                            {
                                <MudAlert Severity="Severity.Error" Class="mt-3">
                                    Please select at least one correct answer.
                                </MudAlert>
                            }
                        </div>
                    }
                    else if (model.Type == QuestionType.TrueFalse)
                    {
                        <div class="space-y-3">
                            <MudText Typo="Typo.body1" Class="mb-3">Select the correct answer:</MudText>
                            <MudRadioGroup T="bool?" Value="@GetTrueFalseValue()" ValueChanged="OnTrueFalseChanged">
                                <div class="flex gap-6">
                                    <MudRadio T="bool?" Value="true" Color="Color.Success">
                                        <div class="flex items-center gap-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" Color="Color.Success" />
                                            True
                                        </div>
                                    </MudRadio>
                                    <MudRadio T="bool?" Value="false" Color="Color.Error">
                                        <div class="flex items-center gap-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Close" Size="Size.Small" Color="Color.Error" />
                                            False
                                        </div>
                                    </MudRadio>
                                </div>
                            </MudRadioGroup>

                            @if (GetTrueFalseValue() == null)
                            {
                                <MudAlert Severity="Severity.Error" Class="mt-3">
                                    Please select the correct answer (True or False).
                                </MudAlert>
                            }
                        </div>
                    }
                    else if (model.Type == QuestionType.Essay)
                    {
                        <div class="space-y-3">
                            <MudTextField T="string"
                                          Value="@(model.Answers.FirstOrDefault()?.AnswerText ?? "")"
                                          ValueChanged="@((string value) => OnEssayAnswerChanged(value))"
                                          Label="Correct Answer"
                                          Variant="Variant.Outlined"
                                          Lines="3"
                                          Required="true"
                                          RequiredError="Please provide the correct answer"
                                          HelperText="Enter the expected answer for this identification question" />

                            @if (string.IsNullOrWhiteSpace(model.Answers.FirstOrDefault()?.AnswerText))
                            {
                                <MudAlert Severity="Severity.Error" Class="mt-3">
                                    Please provide the correct answer.
                                </MudAlert>
                            }
                        </div>
                    }
                </MudCardContent>
            </MudCard>

            <!-- Preview Section -->
            @if (!string.IsNullOrWhiteSpace(model.QuestionText))
            {
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Question Preview</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <div class="bg-gray-50 p-4 rounded-lg">
                            <MudText Typo="Typo.h6" Class="mb-3">@model.QuestionText</MudText>

                            @if (model.Type == QuestionType.MultipleChoice && model.Answers.Any())
                            {
                                <div class="space-y-2">
                                    @for (int i = 0; i < model.Answers.Count; i++)
                                    {
                                        var answer = model.Answers[i];
                                        <div class="flex items-center gap-2">
                                            <span class="font-medium">@GetOptionLetter(i).</span>
                                            <span class="@(answer.IsCorrect ? "text-green-600 font-medium" : "")">
                                                @answer.AnswerText
                                            </span>
                                            @if (answer.IsCorrect)
                                            {
                                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle"
                                                         Color="Color.Success"
                                                         Size="Size.Small" />
                                            }
                                        </div>
                                    }
                                </div>
                            }
                            else if (model.Type == QuestionType.TrueFalse)
                            {
                                <div class="flex gap-4">
                                    <span class="@(GetTrueFalseValue() == true ? "text-green-600 font-medium" : "")">
                                        ☐ True
                                        @if (GetTrueFalseValue() == true)
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle"
                                                     Color="Color.Success"
                                                     Size="Size.Small" />
                                        }
                                    </span>
                                    <span class="@(GetTrueFalseValue() == false ? "text-green-600 font-medium" : "")">
                                        ☐ False
                                        @if (GetTrueFalseValue() == false)
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle"
                                                     Color="Color.Success"
                                                     Size="Size.Small" />
                                        }
                                    </span>
                                </div>
                            }
                            else if (model.Type == QuestionType.Essay)
                            {
                                <div class="border-2 border-dashed border-gray-300 p-3 rounded">
                                    <MudText Typo="Typo.body2" Class="text-gray-500">Answer: _______________</MudText>
                                    @if (!string.IsNullOrWhiteSpace(model.Answers.FirstOrDefault()?.AnswerText))
                                    {
                                        <MudText Typo="Typo.caption" Class="text-green-600 mt-2">
                                            Expected: @model.Answers.FirstOrDefault()?.AnswerText
                                        </MudText>
                                    }
                                </div>
                            }
                        </div>
                    </MudCardContent>
                </MudCard>
            }

            <!-- Debug Information -->
            @if (showDebugInfo)
            {
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Debug Info</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText><strong>Quiz ID:</strong> @model.QuizId</MudText>
                        <MudText><strong>Question Text:</strong> "@model.QuestionText"</MudText>
                        <MudText><strong>Question Type:</strong> @model.Type</MudText>
                        <MudText><strong>Order Index:</strong> @model.OrderIndex</MudText>
                        <MudText><strong>Answers Count:</strong> @model.Answers.Count</MudText>
                        <MudText><strong>Has Correct Answer:</strong> @HasCorrectAnswer()</MudText>
                        <MudText><strong>Is Form Valid:</strong> @IsFormValid()</MudText>
                        <br />
                        <MudText Typo="Typo.h6">Answers:</MudText>
                        @for (int i = 0; i < model.Answers.Count; i++)
                        {
                            var answer = model.Answers[i];
                            <MudText>@(i + 1). "@answer.AnswerText" - IsCorrect: @answer.IsCorrect</MudText>
                        }

                        @if (!string.IsNullOrEmpty(lastErrorMessage))
                        {
                            <br />
                            <MudText Color="Color.Error"><strong>Last Error:</strong> @lastErrorMessage</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            }
        </div>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Text">Cancel</MudButton>
        <MudButton OnClick="ToggleDebug" Variant="Variant.Text" Color="Color.Info">
            @(showDebugInfo ? "Hide Debug" : "Show Debug")
        </MudButton>
        <MudButton OnClick="Submit"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Disabled="@(!IsFormValid() || isSubmitting)"
                   StartIcon="@(isSubmitting ? null : Icons.Material.Filled.Save)">
            @if (isSubmitting)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                @:Saving...
            }
            else
            {
                @(IsEditMode ? "Update Question" : "Create Question")
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public int? QuestionId { get; set; }
    [Parameter] public int? QuizId { get; set; }

    private CreateQuestionDto model = new();
    private List<QuizDto> availableQuizzes = new();
    private bool IsEditMode => QuestionId.HasValue;
    private bool isSubmitting = false;
    private bool showDebugInfo = false;
    private string lastErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableQuizzes();

        if (IsEditMode)
        {
            await LoadQuestionForEdit();
        }
        else
        {
            InitializeNewQuestion();
        }
    }

    private async Task LoadAvailableQuizzes()
    {
        try
        {
            availableQuizzes = await QuizService.GetAllQuizzesAsync();
            if (!availableQuizzes.Any())
            {
                Snackbar.Add("No quizzes available. Please create a quiz first.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            lastErrorMessage = $"Error loading quizzes: {ex.Message}";
            Snackbar.Add(lastErrorMessage, Severity.Error);
        }
    }

    private void InitializeNewQuestion()
    {
        model = new CreateQuestionDto
            {
                QuizId = QuizId ?? (availableQuizzes.FirstOrDefault()?.Id ?? 0),
                Type = QuestionType.MultipleChoice,
                OrderIndex = 1,
                Answers = new List<CreateAnswerDto>
            {
                new() { AnswerText = "", IsCorrect = false },
                new() { AnswerText = "", IsCorrect = false }
            }
            };
    }

    private async Task LoadQuestionForEdit()
    {
        try
        {
            var question = await QuestionService.GetQuestionByIdAsync(QuestionId!.Value);
            if (question != null)
            {
                model = new CreateQuestionDto
                    {
                        QuestionText = question.QuestionText,
                        Type = Enum.Parse<QuestionType>(question.Type, true),
                        QuizId = question.QuizId,
                        OrderIndex = question.OrderIndex,
                        Answers = question.Answers.Select(a => new CreateAnswerDto
                        {
                            AnswerText = a.AnswerText,
                            IsCorrect = a.IsCorrect,
                            Explanation = a.Explanation
                        }).ToList()
                    };
            }
        }
        catch (Exception ex)
        {
            lastErrorMessage = $"Error loading question: {ex.Message}";
            Snackbar.Add(lastErrorMessage, Severity.Error);
        }
    }

    private void OnQuizChanged(int quizId)
    {
        model.QuizId = quizId;
        StateHasChanged();
    }

    private void OnQuestionTypeChanged(QuestionType newType)
    {
        model.Type = newType;

        // Reset answers based on question type
        switch (newType)
        {
            case QuestionType.MultipleChoice:
                if (model.Answers.Count < 2)
                {
                    model.Answers = new List<CreateAnswerDto>
                    {
                        new() { AnswerText = "", IsCorrect = false },
                        new() { AnswerText = "", IsCorrect = false }
                    };
                }
                break;

            case QuestionType.TrueFalse:
                model.Answers = new List<CreateAnswerDto>
                {
                    new() { AnswerText = "True", IsCorrect = false },
                    new() { AnswerText = "False", IsCorrect = false }
                };
                break;

            case QuestionType.Essay:
                model.Answers = new List<CreateAnswerDto>
                {
                    new() { AnswerText = "", IsCorrect = true }
                };
                break;
        }
        StateHasChanged();
    }

    private void AddOption()
    {
        if (model.Type == QuestionType.MultipleChoice)
        {
            model.Answers.Add(new CreateAnswerDto { AnswerText = "", IsCorrect = false });
            StateHasChanged();
        }
    }

    private void RemoveOption(int index)
    {
        if (model.Answers.Count > 2)
        {
            model.Answers.RemoveAt(index);
            StateHasChanged();
        }
    }

    private void MoveOptionUp(int index)
    {
        if (index > 0)
        {
            var item = model.Answers[index];
            model.Answers.RemoveAt(index);
            model.Answers.Insert(index - 1, item);
            StateHasChanged();
        }
    }

    private void MoveOptionDown(int index)
    {
        if (index < model.Answers.Count - 1)
        {
            var item = model.Answers[index];
            model.Answers.RemoveAt(index);
            model.Answers.Insert(index + 1, item);
            StateHasChanged();
        }
    }

    private void OnAnswerTextChanged(int index, string value)
    {
        if (index < model.Answers.Count)
        {
            model.Answers[index].AnswerText = value ?? string.Empty;
            StateHasChanged();
        }
    }

    private void OnCorrectAnswerChanged(int index, bool isCorrect)
    {
        if (index < model.Answers.Count)
        {
            model.Answers[index].IsCorrect = isCorrect;
            StateHasChanged();
        }
    }

    private bool? GetTrueFalseValue()
    {
        var trueAnswer = model.Answers.FirstOrDefault(a => a.AnswerText == "True");
        var falseAnswer = model.Answers.FirstOrDefault(a => a.AnswerText == "False");

        if (trueAnswer?.IsCorrect == true) return true;
        if (falseAnswer?.IsCorrect == true) return false;
        return null;
    }

    private void OnTrueFalseChanged(bool? value)
    {
        var trueAnswer = model.Answers.FirstOrDefault(a => a.AnswerText == "True");
        var falseAnswer = model.Answers.FirstOrDefault(a => a.AnswerText == "False");

        if (trueAnswer != null) trueAnswer.IsCorrect = value == true;
        if (falseAnswer != null) falseAnswer.IsCorrect = value == false;
        StateHasChanged();
    }

    private void OnEssayAnswerChanged(string value)
    {
        if (model.Answers.Any())
        {
            model.Answers[0].AnswerText = value ?? string.Empty;
            model.Answers[0].IsCorrect = true;
        }
        else
        {
            model.Answers.Add(new CreateAnswerDto { AnswerText = value ?? string.Empty, IsCorrect = true });
        }
        StateHasChanged();
    }

    private string GetOptionLetter(int index)
    {
        return ((char)('A' + index)).ToString();
    }

    private string GetAnswersSectionTitle()
    {
        return model.Type switch
        {
            QuestionType.MultipleChoice => "Answer Options",
            QuestionType.TrueFalse => "Correct Answer",
            QuestionType.Essay => "Expected Answer",
            _ => "Answers"
        };
    }

    private bool HasCorrectAnswer()
    {
        return model.Answers.Any(a => a.IsCorrect);
    }

    private bool IsFormValid()
    {
        // Basic validation
        if (string.IsNullOrWhiteSpace(model.QuestionText)) return false;
        if (model.QuizId <= 0) return false;
        if (!model.Answers.Any()) return false;

        // Type-specific validation
        return model.Type switch
        {
            QuestionType.MultipleChoice => model.Answers.Count >= 2 &&
                                         model.Answers.All(a => !string.IsNullOrWhiteSpace(a.AnswerText)) &&
                                         HasCorrectAnswer(),
            QuestionType.TrueFalse => HasCorrectAnswer(),
            QuestionType.Essay => model.Answers.Any() && !string.IsNullOrWhiteSpace(model.Answers[0].AnswerText),
            _ => false
        };
    }

    private void ToggleDebug()
    {
        showDebugInfo = !showDebugInfo;
    }

    private async Task Submit()
    {
        if (!IsFormValid() || isSubmitting) return;

        isSubmitting = true;
        lastErrorMessage = string.Empty;
        StateHasChanged();

        try
        {
            Console.WriteLine("=== SUBMITTING QUESTION ===");
            Console.WriteLine($"Quiz ID: {model.QuizId}");
            Console.WriteLine($"Question Text: '{model.QuestionText}'");
            Console.WriteLine($"Question Type: {model.Type}");
            Console.WriteLine($"Order Index: {model.OrderIndex}");
            Console.WriteLine($"Answers Count: {model.Answers.Count}");

            foreach (var answer in model.Answers)
            {
                Console.WriteLine($"  Answer: '{answer.AnswerText}' - IsCorrect: {answer.IsCorrect}");
            }

            if (IsEditMode)
            {
                var updateDto = new UpdateQuestionDto
                    {
                        QuestionText = model.QuestionText.Trim(),
                        Type = model.Type,
                        QuizId = model.QuizId,
                        OrderIndex = model.OrderIndex,
                        Answers = model.Answers.Select(a => new CreateAnswerDto
                        {
                            AnswerText = a.AnswerText.Trim(),
                            IsCorrect = a.IsCorrect,
                            Explanation = a.Explanation
                        }).ToList()
                    };

                var result = await QuestionService.UpdateQuestionAsync(QuestionId!.Value, updateDto);
                if (result != null)
                {
                    Snackbar.Add("Question updated successfully!", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(result));
                }
                else
                {
                    lastErrorMessage = "Failed to update question. Check console for details.";
                    Snackbar.Add(lastErrorMessage, Severity.Error);
                }
            }
            else
            {
                // Clean the model before sending
                var cleanModel = new CreateQuestionDto
                    {
                        QuestionText = model.QuestionText.Trim(),
                        Type = model.Type,
                        QuizId = model.QuizId,
                        OrderIndex = model.OrderIndex,
                        Answers = model.Answers.Select(a => new CreateAnswerDto
                        {
                            AnswerText = a.AnswerText.Trim(),
                            IsCorrect = a.IsCorrect,
                            Explanation = a.Explanation
                        }).ToList()
                    };

                var result = await QuestionService.CreateQuestionAsync(cleanModel);
                if (result != null)
                {
                    Snackbar.Add("Question created successfully!", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(result));
                }
                else
                {
                    lastErrorMessage = "Failed to create question. Check console and server logs for details.";
                    Snackbar.Add(lastErrorMessage, Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            lastErrorMessage = $"Exception: {ex.Message}";
            Console.WriteLine($"Exception during submit: {ex}");
            Snackbar.Add(lastErrorMessage, Severity.Error);
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}