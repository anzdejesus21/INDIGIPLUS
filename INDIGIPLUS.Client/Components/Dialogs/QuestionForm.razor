@using INDIGIPLUS.Client.Models

<div class="space-y-6">
    <!-- Questions List -->
    @for (int questionIndex = 0; questionIndex < model.Questions.Count; questionIndex++)
    {
        var currentQuestionIndex = questionIndex;
        var question = model.Questions[currentQuestionIndex];

        <MudCard Class="border-l-4 border-indigo-500">
            <MudCardHeader>
                <CardHeaderContent>
                    <div class="flex items-center justify-between">
                        <div class="flex items-center gap-2">
                            <MudIcon Icon="@Icons.Material.Filled.Quiz" Class="text-indigo-500" />
                            <MudText Typo="Typo.h6" Class="font-bold">
                                Question @(currentQuestionIndex + 1)
                            </MudText>
                        </div>
                        <div class="flex items-center gap-2">
                            @if (model.Questions.Count > 1)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               Size="Size.Small"
                                               OnClick="@(() => RemoveQuestion(currentQuestionIndex))"
                                               Title="Remove Question">
                                </MudIconButton>
                            }
                            @if (model.Questions.Count < 20)
                            {
                                <MudButton Variant="Variant.Text"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.Add"
                                           Size="Size.Small"
                                           OnClick="AddQuestion">
                                    Add Question
                                </MudButton>
                            }
                        </div>
                    </div>
                </CardHeaderContent>
            </MudCardHeader>

            <MudCardContent>
                <div class="space-y-6">
                    <!-- Question Text Input -->
                    <MudTextField @bind-Value="question.QuestionText"
                                  Label="Question Text"
                                  Placeholder="Enter your question here..."
                                  Variant="Variant.Outlined"
                                  Lines="3"
                                  Class="mb-4"
                                  Required="true"
                                  RequiredError="Question text is required" />

                    <!-- Question Type Selector -->
                    <div class="mb-4">
                        <MudText Typo="Typo.body1" Class="font-medium mb-3">Question Type:</MudText>
                        <MudRadioGroup Value="question.Type"
                                       T="QuestionType"
                                       ValueChanged="@((QuestionType newType) => OnQuestionTypeChanged(currentQuestionIndex, newType))">
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div class="p-3 border rounded-lg hover:bg-blue-50 cursor-pointer @(question.Type == QuestionType.MultipleChoice ? "bg-blue-50 border-blue-300" : "")">
                                    <MudRadio Value="@QuestionType.MultipleChoice" Color="Color.Primary" Class="mb-2">
                                        <div class="flex items-center gap-2">
                                            <MudIcon Icon="@Icons.Material.Filled.RadioButtonChecked" Class="text-blue-500" />
                                            <span class="font-medium">Multiple Choice</span>
                                        </div>
                                    </MudRadio>
                                    <MudText Typo="Typo.caption" Class="text-gray-600 ml-8">
                                        Students choose from multiple options
                                    </MudText>
                                </div>

                                <div class="p-3 border rounded-lg hover:bg-green-50 cursor-pointer @(question.Type == QuestionType.TrueFalse ? "bg-green-50 border-green-300" : "")">
                                    <MudRadio Value="@QuestionType.TrueFalse" Color="Color.Success" Class="mb-2">
                                        <div class="flex items-center gap-2">
                                            <MudIcon Icon="@Icons.Material.Filled.ToggleOn" Class="text-green-500" />
                                            <span class="font-medium">True/False</span>
                                        </div>
                                    </MudRadio>
                                    <MudText Typo="Typo.caption" Class="text-gray-600 ml-8">
                                        Simple true or false questions
                                    </MudText>
                                </div>

                                <div class="p-3 border rounded-lg hover:bg-red-50 cursor-pointer @(question.Type == QuestionType.Identification ? "bg-red-50 border-red-300" : "")">
                                    <MudRadio Value="@QuestionType.Identification" Color="Color.Error" Class="mb-2">
                                        <div class="flex items-center gap-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="text-red-700" />
                                            <span class="font-medium">Identification</span>
                                        </div>
                                    </MudRadio>
                                    <MudText Typo="Typo.caption" Class="text-gray-600 ml-8">
                                        Students type their answer
                                    </MudText>
                                </div>
                            </div>
                        </MudRadioGroup>
                    </div>

                    <!-- Answers Section -->
                    <MudCard Class="@($"border-l-4 {GetAnswerSectionBorderColor(question.Type)}")">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center gap-2">
                                        <MudIcon Icon="@GetAnswerSectionIcon(question.Type)" Class="@GetAnswerSectionIconColor(question.Type)" />
                                        <MudText Typo="Typo.h6" Class="font-bold">
                                            @GetAnswerSectionTitle(question.Type)
                                        </MudText>
                                    </div>
                                    @if (question.Type == QuestionType.MultipleChoice)
                                    {
                                        <MudButton Variant="Variant.Text"
                                                   Color="Color.Primary"
                                                   StartIcon="@Icons.Material.Filled.Add"
                                                   Size="Size.Small"
                                                   OnClick="@(() => AddAnswer(currentQuestionIndex))"
                                                   Disabled="question.Answers.Count >= 6">
                                            Add Option
                                        </MudButton>
                                    }
                                </div>
                            </CardHeaderContent>
                        </MudCardHeader>

                        <MudCardContent>
                            @if (question.Type == QuestionType.MultipleChoice)
                            {
                                <div class="space-y-3">
                                    @for (int i = 0; i < question.Answers.Count; i++)
                                    {
                                        var currentAnswerIndex = i;
                                        var answer = question.Answers[i];

                                        <div class="flex items-center gap-3 p-3 rounded-lg border @(answer.IsCorrect ? "bg-blue-50 border-blue-200" : "bg-gray-50 border-gray-200")">
                                            <MudRadio T="int"
                                                      Value="currentAnswerIndex"
                                                      GroupName="@($"correct-answer-{currentQuestionIndex}")"
                                                      Checked="answer.IsCorrect"
                                                      Color="Color.Primary"
                                                      CheckedChanged="@((bool isChecked) => { if (isChecked) SetCorrectAnswer(currentQuestionIndex, currentAnswerIndex); })" />

                                            <div class="flex items-center gap-2 flex-1">
                                                <MudChip T="string" Size="Size.Small" Class="bg-gray-200 text-gray-700">
                                                    @GetOptionLabel(i)
                                                </MudChip>
                                                <MudTextField @bind-Value="answer.AnswerText"
                                                              Placeholder="@($"Enter option {GetOptionLabel(i)}")"
                                                              Variant="Variant.Outlined"
                                                              Class="flex-1"
                                                              Required="true" />
                                            </div>
                                            @if (question.Answers.Count > 2)
                                            {
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                               Color="Color.Error"
                                                               Size="Size.Small"
                                                               OnClick="@(() => RemoveAnswer(currentQuestionIndex, currentAnswerIndex))">
                                                </MudIconButton>
                                            }
                                        </div>
                                    }
                                    <MudText Typo="Typo.caption" Class="text-gray-600 mt-2">
                                        Select the correct answer by clicking the radio button
                                    </MudText>
                                </div>
                            }
                            else if (question.Type == QuestionType.TrueFalse)
                            {
                                <div class="space-y-3">
                                    <MudRadioGroup Value="@model.TrueFalseValues[currentQuestionIndex]"
                                                   T="bool"
                                                   ValueChanged="@((bool value) => OnTrueFalseChanged(currentQuestionIndex, value))">
                                        <div class="grid grid-cols-2 gap-4">
                                            <div class="p-4 border rounded-lg hover:bg-green-50 cursor-pointer @(model.TrueFalseValues[currentQuestionIndex] ? "bg-green-50 border-green-300" : "")">
                                                <MudRadio Value="true" Color="Color.Success" Class="mb-2">
                                                    <div class="flex items-center gap-2">
                                                        <MudIcon Icon="@Icons.Material.Filled.Check" Class="text-green-600" />
                                                        <span class="font-medium text-lg">True</span>
                                                    </div>
                                                </MudRadio>
                                            </div>
                                            <div class="p-4 border rounded-lg hover:bg-red-50 cursor-pointer @(!model.TrueFalseValues[currentQuestionIndex] ? "bg-red-50 border-red-300" : "")">
                                                <MudRadio Value="false" Color="Color.Error" Class="mb-2">
                                                    <div class="flex items-center gap-2">
                                                        <MudIcon Icon="@Icons.Material.Filled.Close" Class="text-red-600" />
                                                        <span class="font-medium text-lg">False</span>
                                                    </div>
                                                </MudRadio>
                                            </div>
                                        </div>
                                    </MudRadioGroup>
                                    <MudText Typo="Typo.caption" Class="text-gray-600 text-center">
                                        Select the correct answer for this True/False question
                                    </MudText>
                                </div>
                            }
                            else if (question.Type == QuestionType.Identification)
                            {
                                <div class="space-y-3">
                                    <MudTextField Value="@model.IdentificationValues[currentQuestionIndex]"
                                                  Label="Correct Answer"
                                                  Placeholder="Enter the correct answer..."
                                                  Variant="Variant.Outlined"
                                                  Required="true"
                                                  Class="w-full"
                                                  ValueChanged="@((string value) => OnIdentificationChanged(currentQuestionIndex, value))" />
                                    <MudText Typo="Typo.caption" Class="text-gray-600">
                                        Provide the exact answer that students should type
                                    </MudText>
                                </div>
                            }
                        </MudCardContent>
                    </MudCard>
                </div>
            </MudCardContent>
        </MudCard>
    }

    <!-- Action Buttons -->
    <div class="flex justify-end gap-3 pt-4 border-t">
        <MudButton Variant="Variant.Text"
                   OnClick="OnCancel">
            Cancel
        </MudButton>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="HandleSaveAsync"
                   Disabled="!IsFormValid()">
            Save All Questions (@model.Questions.Count)
        </MudButton>
    </div>
</div>

@code {
    [Parameter] public List<QuestionFormModel> Questions { get; set; } = new();
    [Parameter] public EventCallback<List<QuestionFormModel>> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // Local model for internal state management
    private QuestionFormState model = new();

    protected override void OnInitialized()
    {
        InitializeModel();
    }

    protected override void OnParametersSet()
    {
        InitializeModel();
    }

    private void InitializeModel()
    {
        // Initialize model with existing questions or create a new one
        if (Questions.Any())
        {
            model.Questions = new List<QuestionFormModel>(Questions);
        }
        else
        {
            model.Questions = new List<QuestionFormModel>();
            AddQuestion();
        }

        // Initialize the value dictionaries
        model.TrueFalseValues.Clear();
        model.IdentificationValues.Clear();

        for (int i = 0; i < model.Questions.Count; i++)
        {
            var question = model.Questions[i];

            if (question.Type == QuestionType.TrueFalse)
            {
                var trueAnswer = question.Answers.FirstOrDefault(a => a.AnswerText?.ToLower() == "true");
                model.TrueFalseValues[i] = trueAnswer?.IsCorrect ?? true;
            }
            else if (question.Type == QuestionType.Identification)
            {
                model.IdentificationValues[i] = question.Answers.FirstOrDefault()?.AnswerText ?? string.Empty;
            }
        }
    }

    private void OnQuestionTypeChanged(int questionIndex, QuestionType newType)
    {
        var question = model.Questions[questionIndex];
        var oldType = question.Type;
        question.Type = newType;

        UpdateQuestionAnswers(question, questionIndex, oldType);
        StateHasChanged();
    }

    private void OnTrueFalseChanged(int questionIndex, bool value)
    {
        model.TrueFalseValues[questionIndex] = value;
        UpdateTrueFalseAnswers(questionIndex, value);
        StateHasChanged();
    }

    private void OnIdentificationChanged(int questionIndex, string value)
    {
        model.IdentificationValues[questionIndex] = value;
        UpdateIdentificationAnswers(questionIndex, value);
        StateHasChanged();
    }

    private void UpdateTrueFalseAnswers(int questionIndex, bool isTrue)
    {
        var question = model.Questions[questionIndex];
        if (question.Type == QuestionType.TrueFalse)
        {
            question.Answers = new List<AnswerFormModel>
            {
                new() { AnswerText = "True", IsCorrect = isTrue, OrderIndex = 0 },
                new() { AnswerText = "False", IsCorrect = !isTrue, OrderIndex = 1 }
            };
        }
    }

    private void UpdateIdentificationAnswers(int questionIndex, string answer)
    {
        var question = model.Questions[questionIndex];
        if (question.Type == QuestionType.Identification)
        {
            question.Answers = new List<AnswerFormModel>
            {
                new() { AnswerText = answer ?? string.Empty, IsCorrect = true, OrderIndex = 0 }
            };
        }
    }

    private void UpdateQuestionAnswers(QuestionFormModel question, int questionIndex, QuestionType? oldType = null)
    {
        if (question.Type == QuestionType.TrueFalse)
        {
            if (!model.TrueFalseValues.ContainsKey(questionIndex))
            {
                model.TrueFalseValues[questionIndex] = true;
            }

            var currentValue = model.TrueFalseValues[questionIndex];
            question.Answers = new List<AnswerFormModel>
            {
                new() { AnswerText = "True", IsCorrect = currentValue, OrderIndex = 0 },
                new() { AnswerText = "False", IsCorrect = !currentValue, OrderIndex = 1 }
            };
        }
        else if (question.Type == QuestionType.Identification)
        {
            if (!model.IdentificationValues.ContainsKey(questionIndex))
            {
                model.IdentificationValues[questionIndex] = string.Empty;
            }

            var currentValue = model.IdentificationValues[questionIndex];
            question.Answers = new List<AnswerFormModel>
            {
                new() { AnswerText = currentValue, IsCorrect = true, OrderIndex = 0 }
            };
        }
        else if (question.Type == QuestionType.MultipleChoice)
        {
            if (oldType != QuestionType.MultipleChoice || question.Answers.Count < 2)
            {
                question.Answers = new List<AnswerFormModel>
                {
                    new() { AnswerText = "", IsCorrect = true, OrderIndex = 0 },
                    new() { AnswerText = "", IsCorrect = false, OrderIndex = 1 },
                    new() { AnswerText = "", IsCorrect = false, OrderIndex = 2 },
                    new() { AnswerText = "", IsCorrect = false, OrderIndex = 3 }
                };
            }
        }
    }

    private void AddQuestion()
    {
        var newIndex = model.Questions.Count;
        var newQuestion = new QuestionFormModel
            {
                QuizId = model.Questions.FirstOrDefault()?.QuizId ?? 0,
                OrderIndex = newIndex,
                Type = QuestionType.MultipleChoice,
                Answers = new List<AnswerFormModel>
            {
                new() { AnswerText = "", IsCorrect = true, OrderIndex = 0 },
                new() { AnswerText = "", IsCorrect = false, OrderIndex = 1 },
                new() { AnswerText = "", IsCorrect = false, OrderIndex = 2 },
                new() { AnswerText = "", IsCorrect = false, OrderIndex = 3 }
            }
            };

        model.Questions.Add(newQuestion);

        model.TrueFalseValues[newIndex] = true;
        model.IdentificationValues[newIndex] = string.Empty;

        StateHasChanged();
    }

    private void RemoveQuestion(int index)
    {
        if (model.Questions.Count > 1)
        {
            model.Questions.RemoveAt(index);

            var tempTrueFalse = new Dictionary<int, bool>();
            var tempIdentification = new Dictionary<int, string>();

            for (int i = 0; i < model.Questions.Count; i++)
            {
                if (i < index)
                {
                    if (model.TrueFalseValues.ContainsKey(i))
                        tempTrueFalse[i] = model.TrueFalseValues[i];
                    if (model.IdentificationValues.ContainsKey(i))
                        tempIdentification[i] = model.IdentificationValues[i];
                }
                else
                {
                    if (model.TrueFalseValues.ContainsKey(i + 1))
                        tempTrueFalse[i] = model.TrueFalseValues[i + 1];
                    if (model.IdentificationValues.ContainsKey(i + 1))
                        tempIdentification[i] = model.IdentificationValues[i + 1];
                }

                model.Questions[i].OrderIndex = i;
            }

            model.TrueFalseValues = tempTrueFalse;
            model.IdentificationValues = tempIdentification;

            StateHasChanged();
        }
    }

    private void AddAnswer(int questionIndex)
    {
        var question = model.Questions[questionIndex];
        if (question.Answers.Count < 6)
        {
            question.Answers.Add(new AnswerFormModel
                {
                    AnswerText = "",
                    IsCorrect = false,
                    OrderIndex = question.Answers.Count
                });
            StateHasChanged();
        }
    }

    private void RemoveAnswer(int questionIndex, int answerIndex)
    {
        var question = model.Questions[questionIndex];
        if (question.Answers.Count > 2)
        {
            var wasCorrect = question.Answers[answerIndex].IsCorrect;
            question.Answers.RemoveAt(answerIndex);

            for (int i = 0; i < question.Answers.Count; i++)
            {
                question.Answers[i].OrderIndex = i;
            }

            if (wasCorrect && !question.Answers.Any(a => a.IsCorrect))
            {
                question.Answers[0].IsCorrect = true;
            }
            StateHasChanged();
        }
    }

    private void SetCorrectAnswer(int questionIndex, int answerIndex)
    {
        var question = model.Questions[questionIndex];

        foreach (var answer in question.Answers)
        {
            answer.IsCorrect = false;
        }

        question.Answers[answerIndex].IsCorrect = true;
        StateHasChanged();
    }

    private async Task HandleSaveAsync()
    {
        for (int i = 0; i < model.Questions.Count; i++)
        {
            var question = model.Questions[i];

            if (question.Type == QuestionType.TrueFalse)
            {
                var isTrue = model.TrueFalseValues.ContainsKey(i) ? model.TrueFalseValues[i] : true;
                question.Answers = new List<AnswerFormModel>
                {
                    new() { AnswerText = "True", IsCorrect = isTrue, OrderIndex = 0 },
                    new() { AnswerText = "False", IsCorrect = !isTrue, OrderIndex = 1 }
                };
            }
            else if (question.Type == QuestionType.Identification)
            {
                var answer = model.IdentificationValues.ContainsKey(i) ? model.IdentificationValues[i] : string.Empty;
                question.Answers = new List<AnswerFormModel>
                {
                    new() { AnswerText = answer, IsCorrect = true, OrderIndex = 0 }
                };
            }
        }

        await OnSave.InvokeAsync(model.Questions);
    }

    private bool IsFormValid()
    {
        for (int i = 0; i < model.Questions.Count; i++)
        {
            var question = model.Questions[i];

            if (string.IsNullOrWhiteSpace(question.QuestionText))
                return false;

            switch (question.Type)
            {
                case QuestionType.MultipleChoice:
                    var filledAnswers = question.Answers.Where(a => !string.IsNullOrWhiteSpace(a.AnswerText)).ToList();
                    if (filledAnswers.Count < 2)
                        return false;
                    if (!question.Answers.Any(a => a.IsCorrect))
                        return false;
                    break;
                case QuestionType.TrueFalse:
                    break;
                case QuestionType.Identification:
                    if (!model.IdentificationValues.ContainsKey(i) || string.IsNullOrWhiteSpace(model.IdentificationValues[i]))
                        return false;
                    break;
                default:
                    return false;
            }
        }
        return true;
    }

    private string GetAnswerSectionBorderColor(QuestionType questionType)
    {
        return questionType switch
        {
            QuestionType.MultipleChoice => "border-blue-500",
            QuestionType.TrueFalse => "border-green-500",
            QuestionType.Identification => "border-red-800",
            _ => "border-gray-400"
        };
    }

    private string GetAnswerSectionIcon(QuestionType questionType)
    {
        return questionType switch
        {
            QuestionType.MultipleChoice => Icons.Material.Filled.RadioButtonChecked,
            QuestionType.TrueFalse => Icons.Material.Filled.ToggleOn,
            QuestionType.Identification => Icons.Material.Filled.Edit,
            _ => Icons.Material.Filled.Quiz
        };
    }

    private string GetAnswerSectionIconColor(QuestionType questionType)
    {
        return questionType switch
        {
            QuestionType.MultipleChoice => "text-blue-500",
            QuestionType.TrueFalse => "text-green-500",
            QuestionType.Identification => "text-red-700",
            _ => "text-gray-500"
        };
    }

    private string GetAnswerSectionTitle(QuestionType questionType)
    {
        return questionType switch
        {
            QuestionType.MultipleChoice => "Answer Options",
            QuestionType.TrueFalse => "Select Correct Answer",
            QuestionType.Identification => "Expected Answer",
            _ => "Answers"
        };
    }

    private string GetOptionLabel(int index)
    {
        return ((char)('A' + index)).ToString();
    }

    // Helper class for internal state management
    public class QuestionFormState
    {
        public List<QuestionFormModel> Questions { get; set; } = new();
        public Dictionary<int, bool> TrueFalseValues { get; set; } = new();
        public Dictionary<int, string> IdentificationValues { get; set; } = new();
    }
}