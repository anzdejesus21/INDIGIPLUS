@using INDIGIPLUS.Client.DTOs.Quizs
@using INDIGIPLUS.Client.DTOs.Lessons
@using INDIGIPLUS.Client.Models
@using INDIGIPLUS.Client.Services.Interfaces
@inject IQuizClientService QuizService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <div class="space-y-4">
            <MudTextField @bind-Value="model.Title"
                          Label="Quiz Title"
                          Variant="Variant.Outlined"
                          Required="true"
                          RequiredError="Title is required"
                          MaxLength="200" />

            <MudTextField @bind-Value="model.Description"
                          Label="Description"
                          Variant="Variant.Outlined"
                          Lines="3"
                          MaxLength="500" />

            <MudSelect @bind-Value="model.LessonId"
                       Label="Select Lesson"
                       Variant="Variant.Outlined"
                       Required="true"
                       RequiredError="Please select a lesson">
                @foreach (var lesson in Lessons)
                {
                    <MudSelectItem Value="lesson.Id">@lesson.Title</MudSelectItem>
                }
            </MudSelect>
        </div>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="Save"
                   Disabled="!IsFormValid()">
            @(isEdit ? "Update" : "Create")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public List<LessonDto> Lessons { get; set; } = new();
    [Parameter] public int? QuizId { get; set; }

    private Quiz model = new();
    private bool isEdit = false;

    protected override async Task OnInitializedAsync()
    {
        if (QuizId.HasValue)
        {
            isEdit = true;
            await LoadQuiz();
        }
    }

    private async Task LoadQuiz()
    {
        try
        {
            var quiz = await QuizService.GetQuizByIdAsync(QuizId!.Value);
            if (quiz != null)
            {
                model = new Quiz
                    {
                        Id = quiz.Id,
                        Title = quiz.Title,
                        Description = quiz.Description,
                        LessonId = quiz.LessonId
                    };
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading quiz: {ex.Message}", Severity.Error);
        }
    }

    private async Task Save()
    {
        try
        {
            if (isEdit)
            {
                var updateDto = new UpdateQuizDto
                    {
                        Title = model.Title,
                        Description = model.Description,
                        LessonId = model.LessonId
                    };

                await QuizService.UpdateQuizAsync(model.Id, updateDto);
            }
            else
            {
                var createDto = new CreateQuizDto
                    {
                        Title = model.Title,
                        Description = model.Description,
                        LessonId = model.LessonId
                    };

                await QuizService.CreateQuizAsync(createDto);
            }

            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving quiz: {ex.Message}", Severity.Error);
        }
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(model.Title) && model.LessonId > 0;
    }

    private void Cancel() => MudDialog.Cancel();
}