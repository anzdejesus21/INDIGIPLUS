@using INDIGIPLUS.Client.DTOs.Questions
@using INDIGIPLUS.Client.DTOs.Answers
@using INDIGIPLUS.Client.Services.Interfaces
@inject IQuestionClientService QuestionService
@inject ISnackbar Snackbar

<MudDialog Class="max-w-7xl">
    <DialogContent>
        <div class="space-y-6">
            <!-- Header -->
            <div class="border-b pb-4">
                <div class="flex items-center justify-between">
                    <div>
                        <MudText Typo="Typo.h5" Class="font-bold text-gray-800">
                            Questions for: @QuizTitle
                        </MudText>
                        <MudText Typo="Typo.body2" Class="text-gray-600">
                            Add and manage questions for this quiz
                        </MudText>
                    </div>
                    <div class="flex items-center gap-2">
                        <MudChip T="string" Size="Size.Small" Color="Color.Info">
                            @questions.Count Question@(questions.Count != 1 ? "s" : "")
                        </MudChip>
                    </div>
                </div>
            </div>

            <!-- Single Question Form Section (when adding/editing) -->
            @if (showQuestionForm)
            {
                <div class="border-2 border-blue-200 rounded-lg bg-blue-50/30">
                    <div class="p-4 border-b border-blue-200 bg-blue-50">
                        <div class="flex items-center justify-between">
                            <MudText Typo="Typo.h6" Class="font-bold text-blue-800">
                                @(isEditing ? "Edit Question" : "Add Questions")
                            </MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Close"
                                           Size="Size.Small"
                                           Color="Color.Primary"
                                           OnClick="CancelQuestionForm" />
                        </div>
                    </div>
                    <div class="p-4">
                        <QuestionForm Questions="currentQuestions"
                                      OnSave="SaveQuestions"
                                      OnCancel="CancelQuestionForm" />
                    </div>
                </div>
            }
            else
            {
                <!-- Add New Question Button -->
                <div class="flex justify-end gap-2">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Add"
                               OnClick="AddNewQuestion">
                        Add Questions
                    </MudButton>
                </div>

                <!-- Questions List -->
                @if (isLoading)
                {
                    <div class="flex justify-center py-8">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    </div>
                }
                else if (!questions.Any())
                {
                    <MudCard Class="border-dashed border-2 border-gray-300">
                        <MudCardContent Class="text-center py-8">
                            <MudIcon Icon="@Icons.Material.Outlined.QuestionAnswer"
                                     Size="Size.Large"
                                     Class="text-gray-400 mb-4" />
                            <MudText Typo="Typo.h6" Class="text-gray-600 mb-2">
                                No questions yet
                            </MudText>
                            <MudText Typo="Typo.body2" Class="text-gray-500 mb-4">
                                Create your first question to get started
                            </MudText>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Add"
                                       OnClick="AddNewQuestion">
                                Add Questions
                            </MudButton>
                        </MudCardContent>
                    </MudCard>
                }
                else
                {
                    <div class="space-y-4 max-h-96 overflow-y-auto">
                        @foreach (var question in questions.OrderBy(q => q.OrderIndex))
                        {
                            <QuestionCard Question="question"
                                          OnEdit="() => EditQuestion(question)"
                                          OnDelete="() => DeleteQuestion(question)"
                                          OnMoveUp="() => MoveQuestion(question, -1)"
                                          OnMoveDown="() => MoveQuestion(question, 1)"
                                          CanMoveUp="question.OrderIndex > 0"
                                          CanMoveDown="question.OrderIndex < questions.Count - 1" />
                        }
                    </div>
                }
            }
        </div>
    </DialogContent>

    <DialogActions>
        @if (!showQuestionForm)
        {
            <MudButton OnClick="Cancel">Close</MudButton>
            <MudButton Color="Color.Primary"
                       Variant="Variant.Filled"
                       OnClick="SaveAndClose">
                Save & Close
            </MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public int QuizId { get; set; }
    [Parameter] public string QuizTitle { get; set; } = string.Empty;

    private List<QuestionDto> questions = new();
    private List<QuestionFormModel> currentQuestions = new();
    private bool showQuestionForm = false;
    private bool isLoading = false;
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadQuestions();
    }

    private async Task LoadQuestions()
    {
        isLoading = true;
        try
        {
            questions = await QuestionService.GetQuestionsByQuizAsync(QuizId);
            StateHasChanged(); // Force UI refresh
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading questions: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void AddNewQuestion()
    {
        currentQuestions = new List<QuestionFormModel> { CreateNewQuestionModel() };
        isEditing = false;
        showQuestionForm = true;
        StateHasChanged();
    }

    private QuestionFormModel CreateNewQuestionModel()
    {
        return new QuestionFormModel
            {
                QuizId = QuizId,
                OrderIndex = questions.Count,
                Type = QuestionType.MultipleChoice,
                Answers = new List<AnswerFormModel>
            {
                new() { AnswerText = "", IsCorrect = true, OrderIndex = 0 },
                new() { AnswerText = "", IsCorrect = false, OrderIndex = 1 },
                new() { AnswerText = "", IsCorrect = false, OrderIndex = 2 },
                new() { AnswerText = "", IsCorrect = false, OrderIndex = 3 }
            }
            };
    }

    private void EditQuestion(QuestionDto question)
    {
        var questionModel = new QuestionFormModel
            {
                Id = question.Id,
                QuestionText = question.QuestionText,
                Type = QuestionType.MultipleChoice,
                QuizId = question.QuizId,
                OrderIndex = question.OrderIndex,
                Answers = question.Answers.Select(a => new AnswerFormModel
                {
                    Id = a.Id,
                    AnswerText = a.AnswerText,
                    IsCorrect = a.IsCorrect,
                    OrderIndex = a.OrderIndex
                }).ToList()
            };

        currentQuestions = new List<QuestionFormModel> { questionModel };
        isEditing = true;
        showQuestionForm = true;
        StateHasChanged();
    }

    private async Task SaveQuestions(List<QuestionFormModel> questionsToSave)
    {
        try
        {
            foreach (var question in questionsToSave)
            {
                if (isEditing && question.Id > 0)
                {
                    var updateDto = new UpdateQuestionDto
                        {
                            QuestionText = question.QuestionText,
                            Type = question.Type,
                            QuizId = question.QuizId,
                            OrderIndex = question.OrderIndex,
                            Answers = question.Answers.Select(a => new CreateAnswerDto
                            {
                                AnswerText = a.AnswerText,
                                IsCorrect = a.IsCorrect,
                                OrderIndex = a.OrderIndex
                            }).ToList()
                        };

                    await QuestionService.UpdateQuestionAsync(question.Id, updateDto);
                }
                else
                {
                    // For new questions, update the order index
                    question.OrderIndex = questions.Count + questionsToSave.IndexOf(question);

                    var createDto = new CreateQuestionDto
                        {
                            QuestionText = question.QuestionText,
                            Type = question.Type,
                            QuizId = question.QuizId,
                            OrderIndex = question.OrderIndex,
                            Answers = question.Answers.Select(a => new CreateAnswerDto
                            {
                                AnswerText = a.AnswerText,
                                IsCorrect = a.IsCorrect,
                                OrderIndex = a.OrderIndex
                            }).ToList()
                        };

                    await QuestionService.CreateQuestionAsync(createDto);
                }
            }

            var actionText = isEditing ? "updated" : "created";
            var count = questionsToSave.Count;
            Snackbar.Add($"Successfully {actionText} {count} question{(count != 1 ? "s" : "")}", Severity.Success);

            // Hide form and reload questions
            showQuestionForm = false;
            await LoadQuestions();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving questions: {ex.Message}", Severity.Error);
        }
    }

    private void CancelQuestionForm()
    {
        showQuestionForm = false;
        currentQuestions.Clear();
        StateHasChanged();
    }

    private async Task DeleteQuestion(QuestionDto question)
    {
        try
        {
            var success = await QuestionService.DeleteQuestionAsync(question.Id);
            if (success)
            {
                await LoadQuestions();
                Snackbar.Add("Question deleted successfully", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to delete question", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting question: {ex.Message}", Severity.Error);
        }
    }

    private async Task MoveQuestion(QuestionDto question, int direction)
    {
        // TODO: Implement question reordering
        Snackbar.Add("Question reordering coming soon!", Severity.Info);
    }

    private void Cancel() => MudDialog.Cancel();

    private void SaveAndClose() => MudDialog.Close(DialogResult.Ok(true));
}